@using System.Security.Cryptography
@using Application
@using Domain.Marketplace
@using Newtonsoft.Json
@model Domain.Marketplace.IItem
@inject IGetIItemInformation _injector

<div class="Item" data-prices="@JsonConvert.SerializeObject(_injector.GetPricesForShop(Model))" data-item-type="@(Model is Dish ? "dish" : "product")" data-item-id="@Model.Id">
    <div class="text-center mb-3">
        <img src="@Model.ImageUri" alt="@Model.Name" class="Image">
    </div>
    <div class="row Item-data mb-3">
        <div class="col">
            <h5 class="lead Name">@Model.Name</h5>
            <h6 class="text-black-50 mb-2">
                <span class="Weight">@Model.Weight</span>
                <span> г.</span>
            </h6>
            <h4>
                <span class="Price"></span>
                <span> руб.</span>
            </h4>
        </div>
        <div class="col d-flex justify-content-end">
            <div class="Shop"></div>
        </div>
    </div>
    <div class="row row-cols-auto">
        <button class="btn btn-primary delete-from-cart col-5" type="button" disabled>-</button>
        <input type="number" class="Count col mx-auto text-center" value="0">
        <button class="btn btn-primary add-to-cart col-5" type="button">+</button>
    </div>
    @if (Model is Dish dish)
    {
        <div class="dish">
            @{
                <h6>Состоит из:</h6>
                foreach (var product in dish.Products.Select(productWrapper => productWrapper.Product))
                {
                    <div class="col" data-info="@JsonConvert.SerializeObject(product)">
                        <img src="@product.ImageUri" alt="@product.Name">
                        <h4 class="text-muted">@product.Name</h4>
                    </div>
                }
            }
        </div>
    }
</div>
